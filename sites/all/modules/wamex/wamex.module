<?php
// $Id$

/**
 * @file   WaMEx module.
 */
 
 
 /**
 * Implements hook_menu().
 */
	
function wamex_menu() {

  $items = array();
	
	// render any drupal page via ajax
	$items['get/ajax'] = array(
    'page callback' => 'wamex_ajax_get_ajax', // Render HTML
    //'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'wamex_ajax_callback',  // Magic goes here
  );  
	
	// project functions
	$items['project/add'] = array(
    'title' => 'Add Project',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wamex_project_form'),
    'access arguments' => array('Create new content'),
    'type' => MENU_LOCAL_TASK,
	);
	
	$items['project/edit/%'] = array(
    'title' => 'Edit Project',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wamex_project_form',2),
    'access arguments' => array('Edit own content'),
    'type' => MENU_CALLBACK,
	);
	
	$items['project/delete/%'] = array(
    'title' => 'Delete Project',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wamex_project_delete_confirm',2),
    'access arguments' => array('Delete own content'),
    'type' => MENU_CALLBACK,
	);
	
	
	// loading functions
	$items['loading/add/%'] = array(
		'title' => 'Add Loading',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wamex_loading_form',NULL,2),
		'access arguments' => array('Create new content'),
		'type' => MENU_LOCAL_TASK,
	);
	$items['loading/edit/%'] = array(
		'title' => 'Edit Loading',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wamex_loading_form',2, NULL),
		'access arguments' => array('Edit own content'),
		'type' => MENU_CALLBACK,
	);
	$items['loading/delete/%'] = array(
		'title' => 'Delete Loading',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wamex_loading_delete_confirm',2,107),
		'access arguments' => array('Delete own content'),
		'type' => MENU_CALLBACK,
	);
	
	$items['loading/technologies'] = array(
		'title' => 'Loading Technologies',
    'page callback' => 'wamex_display_tech',
		//'page arguments' => array(1,2,3,4,5),
    'access arguments' => array('administer WaMEx technology'),
		//'type' => MENU_DEFAULT_LOCAL_TASK,
	);
	
	/*$items['test/table'] = array(
		'title' => 'Test table',
		'page callback' => 'wamex_display_table',
		'access arguments' => array('administer WaMEx technology'),
		'type' => MENU_CALLBACK,
	);*/
	
  return $items;
}


/*function wamex_display_table() {
	$name = 'chino';
	$surname = 'singson';
	$row = array(
		'title' => array(
			'data' => $name . ' ' . $surname,
			'class' => array('myClass')
		),
		//'date' => date('Y-m-d', $account->created),
		'name' => $name . ' ' . $surname,
	);
	$output = theme('table',array('header'=>array(),'rows'=>$row));

	return $output;
}*/

//function wamex_select_tech($loading,$target);

function wamex_display_tech(){
	//$data = db_query('SELECT * FROM {wamex_technology} WHERE tid = :tid', array(':tid' => $tid))->fetchObject();
  // Add the filter form above the overview table.
 // $output = drupal_get_form('dsmisc_path_title_filter_form', $keys);

 /* if ($keys) {
    // Replace wildcards with MySQL/PostgreSQL wildcards.
    $keys = preg_replace('!\*+!', '%', $keys);
    $sql = "SELECT * FROM {wamex_technology} WHERE name LIKE '%%%s%%'";
  }
  else {
    $sql = 'SELECT * FROM {wamex_technology}';
  } */
	
	/* !!!! */
	//if node->tech_ids_field , display
	//else wamex_select_tech
  
  $header = array(
    array('data' => t('ID'), 'field' => 'tid', 'sort' => 'asc'), 
    array('data' => t('Name'), 'field' => 'name') ,
	
    array('data' => t('COD'), 'field' => 'cod'),
    array('data' => t('BOD5'), 'field' => 'max_bod'),
	array('data' => t('N %'), 'field' => 'max_n_p'),
    array('data' => t('N max'), 'field' => 'max_n_a'),
	array('data' => t('P '), 'field' => 'max_p_a	'),
	array('data' => t('TSS %'), 'field' => 'max_tss_p'),
    array('data' => t('TSS max'), 'field' => 'max_tss_a'),
  );
	
	$node = menu_get_object();
	
	if ($node->field_tech_ids) 
	{
		$tech_ids = $node->field_tech_ids;
	} 
	else 
	{
		//$tids = wamex_select_tech($loadings,$standards);
		$tech_ids = array(1,2,3,4,5);
	}
  
  //$sql .= tablesort_sql($header);
  //$result = pager_query($sql, 50, 0 , NULL, $keys);

  $select = db_select('wamex_technology', 'wt')->extend('Tablesort');
  $results = $select->fields('wt', array('tid', 'name','cod', 'max_bod', 'max_n_p', 'max_n_a', 'max_p_a', 'max_tss_p', 'max_tss_a'))->orderByHeader($header)
									 ->condition('tid', $tech_ids,'IN')
									 ->execute();
  
	
   $rows = array();
   $destination = drupal_get_destination();
   foreach ($results as $val) {
    $rows[] = array(
      'id'=>$val->tid,
      'name'=>$val->name,
			'COD'=>$val->cod, 
			'BOD5'=>$val->max_bod, 
			'N_p'=>$val->max_n_p, 
			'N_a'=>$val->max_n_a, 
			'P'=>$val->max_p_a, 
			'TSS_p'=>$val->max_tss_p, 
			'TSS_a'=>$val->max_tss_a//, 
	   //l(t('edit'), "admin/config/wamex/technology/edit/$val->tid", array('query' => $destination)),
       //l(t('delete'), "admin/config/wamex/technology/delete/$val->tid", array('query' => $destination)),
      );
   }
  
  if (empty($rows)) {
    $empty_message = $keys ? t('No URL aliases found.') : t('No URL aliases available.') ;
    $rows[] = array(array('data' => $empty_message, 'colspan' => 48));
  }

  $output = theme('table', array('header' => $header, 'rows' =>$rows, 'attributes'=>array('id'=>'table-loading-tech')));
	//$output = theme_table(array('header'=>array($header), 'rows'=>array($rows)));
  //$output .= theme('pager', NULL, 50, 0);

  return $output;
}


function wamex_get_selectbox_contents($vid) {
  $terms = taxonomy_get_tree($vid);
	$output = array();
  foreach ($terms as $data) {
    $output[$data->tid] = $data->name;
  }

  return $output;
}

function wamex_preprocess_page(&$variables){
	$arg = arg();
	if ($arg[0] == 'dashboard' || @is_object($variables['node']) && $variables['node']->type == 'project'){
	drupal_add_js(drupal_get_path('module','wamex').'/formvalidation/js/formValidation.min.js',array('type'=>'file','group'=>JS_DEFAULT));
	drupal_add_js(drupal_get_path('module','wamex').'/formvalidation/js/framework/bootstrap.min.js',array('type'=>'file','group'=>JS_DEFAULT));
	//drupal_add_js(drupal_get_path('module','wamex').'/formvalidation/js/framework/bootstrap-select.min.js',array('type'=>'file','group'=>JS_DEFAULT));
	}
	if ($arg[0] == 'dashboard'){
		// load taxonomy tree for currency
		$variables['show_messages'] = FALSE;
		$currency_taxonomy = taxonomy_vocabulary_machine_name_load('currency');
		$currency_taxonomy_tree = taxonomy_get_tree($currency_taxonomy->vid,0);
		//echo "<pre style='height: 500px; overflow-y: scroll'>".print_r($currency_taxonomy_tree,1)."</pre>";
		// get all term ids
		$currency_tids = array();
		foreach($currency_taxonomy_tree as $term) {
			$currency_tids[] = $term->tid;
		}
		// load all terms
		$currency_terms = taxonomy_term_load_multiple($currency_tids);
		drupal_add_js(array('node' => array('values' => array('field_exchange_rate_to_usd'=>0))),'setting');
		
		// add terms to Drupal.settings
		// access in JS via Drupal.settings.taxonomy.currency
		drupal_add_js(array('taxonomy' => array('currency' => $currency_terms)), 'setting');

	}
	
	if (@is_object($variables['node']) && $variables['node']->type == 'project'){
		//drupal_set_message('message','status');
		$variables['title'] = FALSE;
		$variables['tabs'] = FALSE;
		//$variables['page_title'] =

		$loading_taxonomy = taxonomy_vocabulary_machine_name_load('loading_type');
		$loading_taxonomy_tree = taxonomy_get_tree($loading_taxonomy->vid,0,NULL,TRUE);
		$loading_tids = array();
		//foreach ($loading_taxonomy_tree as $term){
		//	$loading_types[] = 
		//}
		//drupal_set_message('<pre>'.print_r($loading_taxonomy_tree,1).'</pre>','status');
		drupal_add_js(array('taxonomy' => array('loadingTypes' => $loading_taxonomy_tree)),'setting');
		//$loading_types = taxonomy_term_load(multiple()
		$effluent_taxonomy = taxonomy_vocabulary_machine_name_load('effluent_standard');
		$effluent_taxonomy_tree  = taxonomy_get_tree($effluent_taxonomy->vid,0,NULL,TRUE);
		//$effluent_opts = $effluent_terms;
		drupal_add_js(array('taxonomy' => array('effluentStandards' => $effluent_taxonomy_tree)),'setting');

	}
}

function wamex_form($variables) {
  $element = $variables ['element'];
	$output = '';
	//drupal_set_message(print_r($variables),'status');
  if (isset($element ['#action'])) {
    $element ['#attributes']['action'] = drupal_strip_dangerous_protocols($element ['#action']);
  }
  element_set_attributes($element, array('method', 'id'));
  if (empty($element ['#attributes']['accept-charset'])) {
    $element ['#attributes']['accept-charset'] = "UTF-8";
  }
  // Anonymous DIV to satisfy XHTML compliance.
  $output .= '<form' . drupal_attributes($element ['#attributes']) . '><div id="form-wrapper-div">' . $element ['#children'] . '</div></form>';
	return $output;
}

function wamex_loading_form($form, &$form_state, $nid = null, $pid = null){
	if ($nid){
		$node = node_load($nid);
		//drupal_set_message('<pre>'.print_r($node).'</pre>','status');
		$title = $node->title;
		$body = $node->body;
		$project_nid = $node->field_loading_project[LANGUAGE_NONE][0]['target_id'];
		$type = $node->field_loading_type[LANGUAGE_NONE][0]['tid'];
		$adwf = $node->field_loading_adwf[LANGUAGE_NONE][0]['value'];
		$cod = $node->field_loading_cod[LANGUAGE_NONE][0]['value'];
		$bod5 = $node->field_loading_bod5[LANGUAGE_NONE][0]['value'];
		$totn = $node->field_loading_totn[LANGUAGE_NONE][0]['value'];
		$totp = $node->field_loading_totp[LANGUAGE_NONE][0]['value'];
		$tss = $node->field_loading_tss[LANGUAGE_NONE][0]['value'];
		$weight = $node->field_loading_weight[LANGUAGE_NONE][0]['value'];
		$cancel_btn_id = 'edit-loading-cancel-'.$nid;
	} else {
		$node = NULL;
		$title = '';
		$body = '';
		$project_nid = $pid;
		$type = '_none';
		$adwf = 0;
		$cod = 0;
		$bod5 = 0;
		$totn = 0;
		$totp = 0;
		$tss = 0;
		$weight = 0;
		$cancel_btn_id = 'add-loading-cancel';
	}
	
	$form = array();
	//$form['#theme'] = 'table';
	//$form['#attributes']['class'][] = 'row';
	//$form['#attributes']['class'][] = 'form-container';
	//$form['#attributes']['class'][] = 'container-fluid';
	
	
	$form['title'] = array(
		'#type' => 'textfield',
		'#required' => TRUE,
		'#title' => t('Name'),
		'#default_value' => $title,
		'#size' => 15,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
		//'#prefix' => '<td class="view-field view-field-edit">',
		//'#suffix' => '</td>',
		'#attributes' =>array('placeholder' => t('*Required')),
		//'#field_prefix' => 'field_prefix|',
		//'#prefix' => '<div>',
	);
	$form['title']['#attributes']['class'][] = 'loading-required';
	
	$form['field_loading_project_und'] = array(
		'#type' => 'hidden',
		'#title' => t('Project'),
		'#default_value' => $project_nid,
	);
	
	$loading_type_vocab = taxonomy_vocabulary_machine_name_load('loading_type');
	$loading_type_terms  = wamex_get_selectbox_contents($loading_type_vocab->vid);
	$loading_type_opts = $loading_type_terms;
	//array(''=>t('*Required'))+
	
	$form['field_loading_type'] = array(
		'#type' => 'select',
		'#title' => t('Type'),
		'#required' => TRUE,
		//'#empty_option' => t('- Select -'),
		//'#empty_value' => 0,
		'#options' => $loading_type_opts,
		//'#default_value' => $type,
		'#prefix' => '<div class="col-sm-2">',
		'#suffix' => '</div>',
	);
	$form['field_loading_type']['#attributes']['class'][] = 'loading-required';
	
	$form['field_loading_adwf'] = array(
		'#type' => 'textfield',
		'#title' => t('ADWF'),
		'#default_value' => $adwf,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);
	$form['field_loading_adwf']['#attributes']['class'][] = 'form-loading-attribute';
	
	$form['field_loading_cod'] = array(
		'#type' => 'textfield',
		'#title' => t('COD'),
		'#default_value' => $cod,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);
	$form['field_loading_cod']['#attributes']['class'][] = 'form-loading-attribute';
	
	$form['field_loading_bod5'] = array(
		'#type' => 'textfield',
		'#title' => t('BOD5'),
		'#default_value' => $bod5,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);
	$form['field_loading_bod5']['#attributes']['class'][] = 'form-loading-attribute';
	
	$form['field_loading_totn'] = array(
		'#type' => 'textfield',
		'#title' => t('TotN'),
		'#default_value' => $totn,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);
	$form['field_loading_totn']['#attributes']['class'][] = 'form-loading-attribute';
	
	$form['field_loading_totp'] = array(
		'#type' => 'textfield',
		'#title' => t('TotP'),
		'#default_value' => $totp,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);
	$form['field_loading_totp']['#attributes']['class'][] = 'form-loading-attribute';
	
	$form['field_loading_tss'] = array(
		'#type' => 'textfield',
		'#title' => t('TSS'),
		'#default_value' => $tss,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);
	$form['field_loading_tss']['#attributes']['class'][] = 'form-loading-attribute';
	
	$form['field_loading_weight'] = array(
		'#type' => 'textfield',
		'#title' => t('%'),
		'#required' => TRUE,
		'#default_value' => $weight,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);
	$form['field_loading_weight']['#attributes']['class'][] = 'form-loading-attribute';
	
	$form['actions']['submit']['#prefix'] = '<div class="col-sm-1">';
	$form['actions']['submit']['#suffix'] = '</div>';
	$form['actions']['submit']['#type'] = 'submit';
	$form['actions']['submit']['#ajax']['type'] = 'throbber';
	$form['actions']['submit']['#ajax']['callback'] = 'wamex_loading_form_submit';
	$form['actions']['submit']['#attributes']['class'][] = 'btn-xs';
	$form['actions']['cancel']['#prefix'] = '<div class="col-sm-1">';
	$form['actions']['cancel']['#suffix'] = '</div>';
	$form['actions']['cancel']['#type'] = 'button';
	$form['actions']['cancel']['#value'] = t('Cancel');
	$form['actions']['cancel']['#attributes']['id'] = 'cancel-loading';
	$form['actions']['cancel']['#attributes']['class'][] = 'btn';
	$form['actions']['cancel']['#attributes']['class'][] = 'btn-default';
	$form['actions']['cancel']['#attributes']['class'][] = 'btn-xs';

	if ($nid){
		// edit existing
		$form['nid']['#type'] = 'hidden';
		$form['nid']['#value'] = $nid;
		$form['actions']['submit']['#value'] = t('<span class="glyphicon glyphicon-floppy-save"></span>&nbsp;Update');
		//$form['actions']['submit']['#attributes']['id'] = 'edit-submit-'.$nid;
	} else {
		// add new
		$form['actions']['submit']['#value'] = t('<span class="glyphicon glyphicon-floppy-save"></span>&nbsp;Save');
		//$form['actions']['submit']['#attributes']['id'] = 'edit-submit';
	}
	
	return $form;

}

function wamex_loading_form_submit($form, &$form_state){
	ctools_include('ajax');
	ctools_add_js('ajax-responder');
	$errors = form_get_errors();
	$commands = array();
	drupal_get_messages();

	if(!empty($errors)) { 
		$selector = '#project-messages';
		$error_variables = array(
			'items'=> $errors,
			'title'=> 'Add New Loading Errors',
			'type'=> 'ul',
		);
		drupal_set_message(theme_item_list($errors),'error');
		drupal_set_message('this','error');
		//$form_state['redirect'] = 'dashboard';
    $commands[] = ajax_command_html($selector, '<div class = "error-msgs">' .theme('status_messages'). '</div>');
		return array('#type' => 'ajax', '#commands' => $commands);
	}
	else {
	
		if (empty($form_state['values']['nid'])){
			// add new node
			global $user;
			$newnode = new stdClass();
			$newnode->title = $form_state['input']['title'];
			$newnode->language = LANGUAGE_NONE;
			$newnode->type = 'loading';
			$newnode->field_loading_project[LANGUAGE_NONE][0]['target_id'] = $form_state['input']['field_loading_project_und'];
			$newnode->field_loading_type[LANGUAGE_NONE][0]['tid'] = $form_state['input']['field_loading_type'];
			$newnode->field_loading_adwf[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_adwf'];
			$newnode->field_loading_cod[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_cod'];
			$newnode->field_loading_bod5[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_bod5'];
			$newnode->field_loading_totn[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_totn'];
			$newnode->field_loading_totp[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_totp'];
			$newnode->field_loading_tss[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_tss'];
			$newnode->field_loading_weight[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_weight'];
			try {
				node_save($newnode);
				$success = TRUE;
				drupal_set_message(t('Loading <b>'.$newnode->title.'</b> created.'));
			} 
			catch (Exception $e) {
				// Do your error handling here.
				$success = FALSE;
				drupal_set_message(t('New Loading not saved.<br/>'.$e->getMessage()),'error');
			}
		} 
		else {
			// update existing node
			$node = node_load($form_state['values']['nid']);
			$node->title = $form_state['input']['title'];
			$node->language = LANGUAGE_NONE;
			$node->field_loading_project[LANGUAGE_NONE][0]['target_id'] = $form_state['input']['field_loading_project_und'];
			$node->field_loading_type[LANGUAGE_NONE][0]['tid'] = $form_state['input']['field_loading_type'];
			$node->field_loading_adwf[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_adwf'];
			$node->field_loading_cod[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_cod'];
			$node->field_loading_bod5[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_bod5'];
			$node->field_loading_totn[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_totn'];
			$node->field_loading_totp[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_totp'];
			$node->field_loading_tss[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_tss'];
			$node->field_loading_weight[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_loading_weight'];
			$node = node_submit($node);
			try {
				node_save($node);
				$success = TRUE;
				drupal_set_message(t('Loading <b>'.$node->title.'</b> updated.'));
			} 
			catch (Exception $e) {
				// Do your error handling here.
				$success = FALSE;
				drupal_set_message(t($e->getMessage().'<br/>Loading not updated.'),'error');
			}
		}

		if ($success){
			$form_state['redirect'] = 'node/'.$form_state['input']['field_loading_project_und'];
			$commands[] = ctools_ajax_command_reload();
			return array('#type' => 'ajax', '#commands' => $commands);
		} 
		
	}
	//$node->field_loading_attributes[LANGUAGE_NONE][0]['field_loading_'][LANGUAGE_NONE] = $form_state['input']['field_loading_'];
}

function wamex_loading_submit_handler($form, &$form_state) {
  if ($form_state['node']->nid) {
  
    
    //popup_element(t(''), t("Your project has been submitted"));
	
	//drupal_set_message(t('1'.$form_state['redirect']));

	$form_state['redirect'] = 'node/'.$form_state['node']->field_loading_project[LANGUAGE_NONE][0]['target_id'];
	//drupal_set_message(t('2.'.print_r($form_state['redirect'])));
	
					$path =  array(
						t('thank-you'),
						array(
							'query' => array(
							'destination' => t('node'),
							),
						),
					);
	
	//$form_state['redirect'] = $path;
  }
}

function wamex_loading_delete_confirm($form, &$form_state, $nid){
	$node = node_load($nid);
	$loading_name = $node->title;
	$project_nid = $node->field_loading_project[LANGUAGE_NONE][0]['target_id'];
  if (user_access('Delete own content')) {
		$form['nid'] = array('#type' => 'hidden', '#value' => $nid);
    $output = confirm_form($form,
      t('Are you sure you want to delete %title?', array('%title' => $loading_name)),
      isset($_GET['destination']) ? $_GET['destination'] : 'node/'.$project_nid,
			t('Are you sure you want to delete loading %title? This action cannot be undone.', array('%title' => $loading_name)),
			t('Yes'),
			t('No'));
  }
  return $output;
}

function wamex_loading_delete_confirm_submit($form, &$form_state){
  if ($form_state['values']['confirm']) {
		try{
			node_delete($form_state['values']['nid']);
			$success = TRUE;
			drupal_set_message(t('The loading has been deleted.'));
		}
		catch (Exception $e){
			$success = FALSE;
			drupal_set_message(t('Could not delete the loading.'),'error');
		}
	
    $form_state['redirect'] = $form['actions']['cancel']['#href'];
    return;
  }

}


function wamex_project_form($form, &$form_state, $nid = null) {
	if ($nid) {
		$node = node_load($nid);
		$title = $node->title;
		$body = $node->body['und'][0]['value'];
		$field_location = $node->field_location['und'][0]['value'];
		$field_population = $node->field_population['und'][0]['value'];
		$field_author = $node->field_author['und'][0]['value'];
		$field_discount_rate = $node->field_discount_rate['und'][0]['value'];
		$field_ci_cost = $node->field_ci_cost['und'][0]['value'];
		$field_currency = $node->field_currency['und'][0]['tid'];
		$field_exchange_rate_to_usd = $node->field_exchange_rate_to_usd['und'][0]['value'];
		$field_effluent_standard = $node->field_effluent_standard['und'][0]['tid'];
	} else {
		$node = NULL;
		$title = '';
		$body = '';
		$field_location = '';
		$field_population = 0;
		$field_author = '';
		$field_discount_rate = 0;
		$field_ci_cost = 0;
		$field_currency = 2;	// default to tid of US Dollar
		$field_exchange_rate_to_usd = 1.0;
		$field_effluent_standard = '';
	}

	$form = array();
	$form['#attributes']['class'][] = 'form-container';
	$form['#attributes']['class'][] = 'container-fluid';
	$form['#attributes']['name'] = 'wamex-project-form';
	//$form['#attributes']['data-toggle'] = 'validator';
	//$form['#attributes']['role'] = 'form';
	$form['title'] = array(
		'#type' => 'textfield',
		'#required' => TRUE,
		'#title' => t('Project Name'),
		'#default_value' => $title,
		'#prefix' => '<div class="row"><div class="col-sm-12">',
		'#suffix' => '</div></div>',
	);
	$form['field_location'] = array(
		'#type' => 'textfield',
		'#title' => t('Location'),
		'#default_value' => $field_location,
		'#prefix' => '<div class="row"><div class="col-sm-12">',
		'#suffix' => '</div></div>',
	);
	$form['field_population_und_0_value'] = array(
		'#type' => 'textfield',
		'#title' => t('Population'),
		'#default_value' => $field_population,
		'#prefix' => '<div class="row"><div class="col-sm-6">',
		'#suffix' => '</div></div>',
	);
	$form['body'] = array(
		'#type' => 'textarea',
		'#title' => t('Description'),
		'#default_value' => $body,
		'#prefix' => '<div class="row"><div class="col-sm-12">',
		'#suffix' => '</div></div>',
	);
	$form['field_author'] = array(
		'#type' => 'textfield',
		'#title' => t('Author'),
		'#default_value' => $field_author,
		'#prefix' => '<div class="row"><div class="col-sm-6">',
		'#suffix' => '</div></div>',
	);
	$form['field_discount_rate_und_0_value'] = array(
		'#type' => 'textfield',
		'#title' => t('Discount Rate'),
		'#default_value' => $field_discount_rate,
		'#prefix' => '<div class="row"><div class="col-sm-6">',
		'#suffix' => '</div></div>',
	);
	$form['field_ci_cost_und_0_value'] = array(
		'#type' => 'textfield',
		'#title' => t('CI Cost'),
		'#default_value' => $field_ci_cost,
		'#prefix' => '<div class="row"><div class="col-sm-6">',
		'#suffix' => '</div></div>',
	);

	$currency_vocab = taxonomy_vocabulary_machine_name_load('currency');
	$currency_terms  = wamex_get_selectbox_contents($currency_vocab->vid);
	$currency_opts = $currency_terms;

	$form['field_currency_und'] = array(
		'#title' => t('Currency'),
		'#type' => 'select',
		'#default_value' => $field_currency,
		'#options' => $currency_opts,
		'#prefix' => '<div class="row"><div class="col-sm-6">',
		'#suffix' => '</div>',
	);
	$form['field_exchange_rate_to_usd_und_0_value'] = array(
		'#title' => t('Exchange Rate to USD'),
		'#type' => 'textfield',
		'#default_value' => $field_exchange_rate_to_usd,
		'#prefix' => '<div class="col-sm-6 hidden" id="field-exchange-rate-to-usd-add-more-wrapper">',
		'#suffix' => '</div></div>',
	);
	
	$effluent_vocab = taxonomy_vocabulary_machine_name_load('effluent_standard');
	$effluent_terms  = wamex_get_selectbox_contents($effluent_vocab->vid);
	$effluent_opts = $effluent_terms;
	
	$form['field_effluent_standard'] = array(
		'#title' => t('Effluent Standard'),
		'#type' => 'select',
		'#options' => $effluent_opts,
		'#prefix' => '<div class="row"><div class="col-sm-6">',
		'#suffix' => '</div>',
	);

	$form['actions']['submit']['#type'] = 'submit';
	$form['actions']['submit']['#ajax']['type'] = 'throbber';
	$form['actions']['submit']['#ajax']['callback'] = 'wamex_project_form_submit';
	//$form['actions']['cancel']['#prefix'] = '<div class="col-sm-1">';
	//$form['actions']['cancel']['#suffix'] = '</div>';
	$form['actions']['cancel']['#type'] = 'button';
	$form['actions']['cancel']['#value'] = t('Cancel');
	$form['actions']['cancel']['#attributes']['id'] = 'cancel-project';
	$form['actions']['cancel']['#attributes']['class'][] = 'btn';
	$form['actions']['cancel']['#attributes']['class'][] = 'btn-default';
	//$form['actions']['cancel']['#attributes']['class'][] = 'btn-xs';
	
	if ($nid){
		// edit existing
		$form['nid']['#type'] = 'hidden';
		$form['nid']['#value'] = $nid;
		$form['actions']['submit']['#value'] = t('Update Project');
	} else {
		// add new
		$form['actions']['submit']['#value'] = t('Save Project');
	}
	
	return $form;
	
}

function wamex_project_form_submit($form, &$form_state){
	ctools_include('ajax');
	ctools_add_js('ajax-responder');
	$errors = form_get_errors();
	$commands = array();
	drupal_get_messages();

	// check for form errors
	if(!empty($errors)) { 
		// if there are errors, display them in the container with id=$selector
		$selector = '#dashboard-messages';
		$error_variables = array(
			'items'=> $errors,
			'title'=> 'Add New Project Errors',
			'type'=> 'ul',
		);
		drupal_set_message(theme_item_list($errors),'error');
		drupal_set_message('this','error');
		//$form_state['redirect'] = 'dashboard';
    $commands[] = ajax_command_html($selector, '<div class = "error-msgs">' .theme('status_messages'). '</div>');
		return array('#type' => 'ajax', '#commands' => $commands);
	} 
	else {
		// if there are no errors, attempt to save the node
		//drupal_set_message('form has no errors','status');
		//$success = NULL;
		if (empty($form_state['values']['nid'])){
			// add new node
			global $user;
			$newnode = new stdClass();
			$newnode->title = $form_state['input']['title'];
			$newnode->language = LANGUAGE_NONE;
			$newnode->type = 'project';
			$newnode->uid = $user->uid;
			$newnode->body[LANGUAGE_NONE][0]['value'] = $form_state['input']['body'];
			$newnode->body[LANGUAGE_NONE][0]['format'] = 'plain_text';
			$newnode->field_location[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_location'];
			$newnode->field_population[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_population_und_0_value'];
			$newnode->field_author[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_author'];
			$newnode->field_discount_rate[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_discount_rate_und_0_value'];
			$newnode->field_ci_cost[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_ci_cost_und_0_value'];
			$newnode->field_currency[LANGUAGE_NONE][0]['tid'] = $form_state['input']['field_currency_und'];
			$newnode->field_exchange_rate_to_usd[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_exchange_rate_to_usd_und_0_value'];
			$newnode = node_submit($newnode);

			try {
				node_save($newnode);
				$success = TRUE;
				drupal_set_message(t('Project <b>'.$newnode->title.'</b> created.'));
			} 
			catch (Exception $e) {
				// Do your error handling here.
				$success = FALSE;
				drupal_set_message(t($e->getMessage().'<br/>New project not saved.'),'error');
			}
		}
		else {
			// update existing node
			$node = node_load($form_state['values']['nid']);
			$node->title = $form_state['input']['title'];
			$node->language = LANGUAGE_NONE;
			$node->body[LANGUAGE_NONE][0]['value'] = $form_state['input']['body'];
			$node->field_location[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_location'];
			$node->field_population[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_population_und_0_value'];
			$node->field_author[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_author'];
			$node->field_discount_rate[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_discount_rate_und_0_value'];
			$node->field_ci_cost[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_ci_cost_und_0_value'];
			$node->field_currency[LANGUAGE_NONE][0]['tid'] = $form_state['input']['field_currency_und'];
			$node->field_exchange_rate_to_usd[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_exchange_rate_to_usd_und_0_value'];
			$node = node_submit($node);
			try {
				node_save($node);
				$success = TRUE;
				drupal_set_message(t('Project <b>'.$node->title.'</b> updated.'));
			} 
			catch (Exception $e) {
				// Do your error handling here.
				$success = FALSE;
				drupal_set_message(t($e->getMessage().'<br/>Project not updated.'),'error');
			}
		}

		if ($success){
			$form_state['redirect'] = 'dashboard';
			$commands[] = ctools_ajax_command_reload();
			return array('#type' => 'ajax', '#commands' => $commands);
		} 
	}
	//return;
}

function wamex_project_delete_confirm($form, $form_state, $nid){
	$node = node_load($nid);
	$project_name = $node->title;
  if (user_access('Delete own content')) {
		$form['nid'] = array('#type' => 'hidden', '#value' => $nid);
    $output = confirm_form($form,
      t('Are you sure you want to delete %title?', array('%title' => $project_name)),
      isset($_GET['destination']) ? $_GET['destination'] : 'dashboard',
			t('Are you sure you want to delete %title? This action cannot be undone.', array('%title' => $project_name)),
			t('Yes'),
			t('No'));
  }
  return $output;
}

function wamex_project_delete_confirm_submit($form, &$form_state){
  if ($form_state['values']['confirm']) {
		try{
			node_delete($form_state['values']['nid']);
			$success = TRUE;
			drupal_set_message(t('The project has been deleted.'),'status');
		}
		catch (Exception $e){
			$success = FALSE;
			drupal_set_message(t('Could not delete the project.'),'error');
		}
	
    $form_state['redirect'] = 'dashboard';
    return;
  }
}

function wamex_ajax_get_ajax() {
	// The function will receive the array of arguments after the "get/ajax" prefix
  $path = implode('/', func_get_args());
  $render_string = menu_execute_active_handler($path, FALSE);
  return $render_string;
}

function wamex_ajax_callback($page_callback_result) {
	// Only render content and validates return
  $content = is_string($page_callback_result) ? $page_callback_result : drupal_render($page_callback_result);
  print $content;
}

function wamex_user_login(&$edit, $account)
{
  // set $redirection to the desired location
  $redirection = 'dashboard';
  
	// Unless there is already a redirection going, or the user is trying to reset his password, we redirect to $redirection.
  if (empty($_GET['destination'])
    && !is_null($redirection)
    && (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset'))
  {
    $_GET['destination'] = $redirection; // Should we use $edit['redirect'] instead..?
  }
}