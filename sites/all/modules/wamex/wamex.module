<?php
// $Id$

/**
 * @file   WaMEx module.
 */
 
 
 /**
 * Implements hook_menu().
 */
	
function wamex_menu() {

  $items = array();
	
	// render any drupal page via ajax
	$items['get/ajax'] = array(
    'page callback' => 'wamex_ajax_get_ajax', // Render HTML
    //'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'wamex_ajax_callback',  // Magic goes here
  );  
	
	// project functions
	$items['project/add'] = array(
    'title' => 'Add Project',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wamex_project_form'),
    'access arguments' => array('Create new content'),
    'type' => MENU_LOCAL_TASK,
	);
	
	$items['project/edit/%'] = array(
    'title' => 'Edit Project',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wamex_project_form',2),
    'access arguments' => array('Edit own content'),
    'type' => MENU_CALLBACK,
	);
	
	$items['project/delete/%'] = array(
    'title' => 'Delete Project',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wamex_project_delete_confirm',2),
    'access arguments' => array('Delete own content'),
    'type' => MENU_CALLBACK,
	);
	
	
	// loading functions
	$items['loading/add'] = array(
		'title' => 'Add Loading',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wamex_loading_form'),
		'access arguments' => array('Create new content'),
		'type' => MENU_LOCAL_TASK,
	);
	$items['loading/edit/%'] = array(
		'title' => 'Edit Loading',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wamex_loading_form',2),
		'access arguments' => array('Edit own content'),
		'type' => MENU_CALLBACK,
	);
	$items['loading/delete/%'] = array(
		'title' => 'Delete Loading',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('wamex_loading_delete_confirm'),
		'access arguments' => array('Delete own content'),
		'type' => MENU_CALLBACK,
	);
	
  return $items;
}

function wamex_loading_form($form, &$form_state, $nid = null){
	if ($nid){
		$node = node_load($nid);
		$title = $node->title;
		$body = $node->body;
		$project_nid = $node->field_loading_project;
		$type = $node->field_loading_type;
		$adwf = $node->field_loading_adwf;
		$cod = $node->field_loading_cod;
		$bod5 = $node->field_loading_bod5;
		$totn = $node->field_loading_totn;
		$totp = $node->field_loading_totp;
		$tss = $node->field_loading_tss;
		$weight = $node->field_loading_weight;
	} else {
		$node = NULL;
		$title = '';
		$body = '';
		$project_nid = 106;
		$type = '_none';
		$adwf = 0;
		$cod = 0;
		$bod5 = 0;
		$totn = 0;
		$totp = 0;
		$tss = 0;
		$weight = 0;
	}
	
	$form = array();
	$form['#attributes']['class'][] = 'form-container';
	$form['#attributes']['class'][] = 'container-fluid';
	
	$form['title'] = array(
		'#type' => 'textfield',
		'#required' => TRUE,
		'#title' => t('Loading Name'),
		'#default_value' => $title,
		//'#prefix' => '<div class="row"><div class="col-sm-12">',
		//'#suffix' => '</div></div>',
	);
	$form['body'] = array(
		'#type' => 'textarea',
		'#title' => t('Description'),
		'#default_value' => $body,
		//'#prefix' => '<div class="row"><div class="col-sm-12">',
		//'#suffix' => '</div></div>',
	);
	
	$form['field_loading_project_und'] = array(
		'#type' => 'textfield',
		'#title' => t('Project'),
		'#default_value' => $project_nid,
		'#attributes' => array(
			'disabled' => NULL,
			'class' => array(
				'disabled'
			)
		)
	);
	
	$form['loading_type_options'] = array(
		'#type' => 'value',
		'#value'=> array(
			'_none' => t('- None -'),
			'Combined Sewage' => t('Combined Sewage'),
			'Black Water' => t('Black Water'),
			'Yellow Water' => t('Yellow Water'),
			'Grey Water' => t('Grey Water'),
			'Sanitary Sewage' => t('Sanitary Sewage'),
			'Industrial' => t('Industrial'),
			'Septage' => t('Septage')),
	);
	
	module_load_include('inc', 'field_collection', 'field_collection.pages');
	module_load_include('inc', 'field_collection', 'field_collection.pages');
	$field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_loading_attributes'));
	field_attach_form('field_collection_item', $field_collection_item, $form['participant'], $form_state);
	
	
	/*$form['field_loading_type'] = array(
		'#type' => 'select',
		'#title' => 'Loading Type',
		'#options' => $form['loading_type_options']['#value'],
		'#default_value' => $type,
		'#prefix' => '<div class="col-sm-5">',
		'#suffix' => '</div>',
	);
	
	$form['field_loading_adwf'] = array(
		'#type' => 'textfield',
		'#title' => t('ADWF'),
		'#default_value' => $adwf,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);
	
	$form['field_loading_cod'] = array(
		'#type' => 'textfield',
		'#title' => t('COD'),
		'#default_value' => $cod,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);
	
	$form['field_loading_bod5'] = array(
		'#type' => 'textfield',
		'#title' => t('BOD5'),
		'#default_value' => $bod5,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);
	
	$form['field_loading_totn'] = array(
		'#type' => 'textfield',
		'#title' => t('Tot N'),
		'#default_value' => $totn,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);
	
	$form['field_loading_totp'] = array(
		'#type' => 'textfield',
		'#title' => t('Tot P'),
		'#default_value' => $totp,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);
	
	$form['field_loading_tss'] = array(
		'#type' => 'textfield',
		'#title' => t('TSS'),
		'#default_value' => $tss,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);
	
	$form['field_loading_weight'] = array(
		'#type' => 'textfield',
		'#title' => t('Weight'),
		'#default_value' => $weight,
		'#prefix' => '<div class="col-sm-1">',
		'#suffix' => '</div>',
	);*/
	
	return $form;

}

function wamex_loading_form_submit($form, &$form_state){

	$node->field_loading_attributes[LANGUAGE_NONE][0]['field_loading_'][LANGUAGE_NONE] = $form_state['input']['field_loading_'];
}

function wamex_loading_submit_handler($form, &$form_state) {
  if ($form_state['node']->nid) {
  
    
    //popup_element(t(''), t("Your project has been submitted"));
	
	//drupal_set_message(t('1'.$form_state['redirect']));

	$form_state['redirect'] = 'node/'.$form_state['node']->field_loading_project[LANGUAGE_NONE][0]['target_id'];
	//drupal_set_message(t('2.'.print_r($form_state['redirect'])));
	
					$path =  array(
						t('thank-you'),
						array(
							'query' => array(
							'destination' => t('node'),
							),
						),
					);
	
	//$form_state['redirect'] = $path;
  }
}


function wamex_loading_delete_confirm($form, &$form_state, $nid){

}

function wamex_loading_delete_confirm_submit($form, &$form_state){

}


function wamex_get_selectbox_contents($vid) {
  $terms = taxonomy_get_tree($vid);
	$output = array();
  foreach ($terms as $data) {
    $output[$data->tid] = $data->name;
  }

  return $output;
}

function wamex_preprocess_page(&$variables){
	$arg = arg();
	if ($arg[0] == 'dashboard'){
		// load taxonomy tree for currency
		$variables['show_messages'] = FALSE;
		$currency_taxonomy = taxonomy_vocabulary_machine_name_load('currency');
		$currency_taxonomy_tree = taxonomy_get_tree($currency_taxonomy->vid,0);
		//echo "<pre style='height: 500px; overflow-y: scroll'>".print_r($currency_taxonomy_tree,1)."</pre>";
		// get all term ids
		$currency_tids = array();
		foreach($currency_taxonomy_tree as $term) {
			$currency_tids[] = $term->tid;
		}
		// load all terms
		$currency_terms = taxonomy_term_load_multiple($currency_tids);
		drupal_add_js(array('node' => array('values' => array('field_exchange_rate_to_usd'=>0))),'setting');
		
		// add terms to Drupal.settings
		// access in JS via Drupal.settings.taxonomy.currency
		drupal_add_js(array('taxonomy' => array('currency' => $currency_terms)), 'setting');

	}
}

function wamex_project_form($form, &$form_state, $nid = null) {
	if ($nid) {
		$node = node_load($nid);
		$title = $node->title;
		$body = $node->body['und'][0]['value'];
		$field_location = $node->field_location['und'][0]['value'];
		$field_population = $node->field_population['und'][0]['value'];
		$field_author = $node->field_author['und'][0]['value'];
		$field_discount_rate = $node->field_discount_rate['und'][0]['value'];
		$field_ci_cost = $node->field_ci_cost['und'][0]['value'];
		$field_currency = $node->field_currency['und'][0]['tid'];
		$field_exchange_rate_to_usd = $node->field_exchange_rate_to_usd['und'][0]['value'];
	} else {
		$node = NULL;
		$title = '';
		$body = '';
		$field_location = '';
		$field_population = 0;
		$field_author = '';
		$field_discount_rate = 0;
		$field_ci_cost = 0;
		$field_currency = 2;	// default to tid of US Dollar
		$field_exchange_rate_to_usd = 1.0;
	}

	$form = array();
	$currency_vocab = taxonomy_vocabulary_machine_name_load('currency');
	//$currency_opts  = taxonomy_allowed_values(field_info_field('field_currency'));
	$currency_terms  = wamex_get_selectbox_contents($currency_vocab->vid);
	$ary_none = array('_none'=>t('- None -'));
	$currency_opts = $ary_none+$currency_terms;

	$form['#attributes']['class'][] = 'form-container';
	$form['#attributes']['class'][] = 'container-fluid';
	$form['title'] = array(
		'#type' => 'textfield',
		'#required' => TRUE,
		'#title' => t('Project Name'),
		'#default_value' => $title,
		'#prefix' => '<div class="row"><div class="col-sm-12">',
		'#suffix' => '</div></div>',
	);
	$form['field_location'] = array(
		'#type' => 'textfield',
		'#title' => t('Location'),
		'#default_value' => $field_location,
		'#prefix' => '<div class="row"><div class="col-sm-12">',
		'#suffix' => '</div></div>',
	);
	$form['field_population_und_0_value'] = array(
		'#type' => 'textfield',
		'#title' => t('Population'),
		'#default_value' => $field_population,
		'#prefix' => '<div class="row"><div class="col-sm-6">',
		'#suffix' => '</div></div>',
	);
	$form['body'] = array(
		'#type' => 'textarea',
		'#title' => t('Description'),
		'#default_value' => $body,
		'#prefix' => '<div class="row"><div class="col-sm-12">',
		'#suffix' => '</div></div>',
	);
	$form['field_author'] = array(
		'#type' => 'textfield',
		'#title' => t('Author'),
		'#default_value' => $field_author,
		'#prefix' => '<div class="row"><div class="col-sm-6">',
		'#suffix' => '</div></div>',
	);
	$form['field_discount_rate_und_0_value'] = array(
		'#type' => 'textfield',
		'#title' => t('Discount Rate'),
		'#default_value' => $field_discount_rate,
		'#prefix' => '<div class="row"><div class="col-sm-6">',
		'#suffix' => '</div></div>',
	);
	$form['field_ci_cost_und_0_value'] = array(
		'#type' => 'textfield',
		'#title' => t('CI Cost'),
		'#default_value' => $field_ci_cost,
		'#prefix' => '<div class="row"><div class="col-sm-6">',
		'#suffix' => '</div></div>',
	);
	$form['field_currency_und'] = array(
		'#title' => t('Currency'),
		'#type' => 'select',
		'#default_value' => $field_currency,
		'#options' => $currency_opts,
		'#prefix' => '<div class="row"><div class="col-sm-6">',
		'#suffix' => '</div>',
	);
	$form['field_exchange_rate_to_usd_und_0_value'] = array(
		'#title' => t('Exchange Rate to USD'),
		'#type' => 'textfield',
		'#default_value' => $field_exchange_rate_to_usd,
		'#prefix' => '<div class="col-sm-6 hidden" id="field-exchange-rate-to-usd-add-more-wrapper">',
		'#suffix' => '</div></div>',
	);

	$form['actions']['submit']['#type'] = 'submit';
	$form['actions']['submit']['#ajax']['type'] = 'throbber';
	$form['actions']['submit']['#ajax']['callback'] = 'wamex_project_form_submit';
	
	if ($nid){
		// edit existing
		$form['nid']['#type'] = 'hidden';
		$form['nid']['#value'] = $nid;
		$form['actions']['submit']['#value'] = t('Update Project');
	} else {
		// add new
		$form['actions']['submit']['#value'] = t('Save Project');
	}
	
	return $form;
	
}

function wamex_project_form_submit($form, &$form_state){
	ctools_include('ajax');
	ctools_add_js('ajax-responder');
	$errors = form_get_errors();
	$commands = array();
	drupal_get_messages();

	// check for form errors
	if(!empty($errors)) { 
		// if there are errors, display them in the container with id=$selector
		$selector = '#dashboard-messages';
		$error_variables = array(
			'items'=> $errors,
			'title'=> 'Add New Project Errors',
			'type'=> 'ul',
		);
		drupal_set_message(theme_item_list($errors),'error');
		drupal_set_message('this','error');
		//$form_state['redirect'] = 'dashboard';
    $commands[] = ajax_command_html($selector, '<div class = "error-msgs">' .theme('status_messages'). '</div>');
		return array('#type' => 'ajax', '#commands' => $commands);
	} 
	else {
		// if there are no errors, attempt to save the node
		//drupal_set_message('form has no errors','status');
		//$success = NULL;
		if (empty($form_state['values']['nid'])){
			// add new node
			global $user;
			$newnode = new stdClass();
			$newnode->title = $form_state['input']['title'];
			$newnode->language = LANGUAGE_NONE;
			$newnode->type = 'project';
			$newnode->uid = $user->uid;
			$newnode->body[LANGUAGE_NONE][0]['value'] = $form_state['input']['body'];
			$newnode->body[LANGUAGE_NONE][0]['format'] = 'plain_text';
			$newnode->field_location[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_location'];
			$newnode->field_population[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_population_und_0_value'];
			$newnode->field_author[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_author'];
			$newnode->field_discount_rate[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_discount_rate_und_0_value'];
			$newnode->field_ci_cost[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_ci_cost_und_0_value'];
			$newnode->field_currency[LANGUAGE_NONE][0]['tid'] = $form_state['input']['field_currency_und'];
			$newnode->field_exchange_rate_to_usd[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_exchange_rate_to_usd_und_0_value'];
			$newnode = node_submit($newnode);

			try {
				node_save($newnode);
				$success = TRUE;
				drupal_set_message(t('Project <b>'.$newnode->title.'</b> created.'));
			} 
			catch (Exception $e) {
				// Do your error handling here.
				$success = FALSE;
				drupal_set_message(t($e->getMessage().'<br/>New project not saved.'),'error');
			}
		}
		else {
			// update existing node
			$node = node_load($form_state['values']['nid']);
			$node->title = $form_state['input']['title'];
			$node->language = LANGUAGE_NONE;
			$node->body[LANGUAGE_NONE][0]['value'] = $form_state['input']['body'];
			$node->field_location[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_location'];
			$node->field_population[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_population_und_0_value'];
			$node->field_author[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_author'];
			$node->field_discount_rate[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_discount_rate_und_0_value'];
			$node->field_ci_cost[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_ci_cost_und_0_value'];
			$node->field_currency[LANGUAGE_NONE][0]['tid'] = $form_state['input']['field_currency_und'];
			$node->field_exchange_rate_to_usd[LANGUAGE_NONE][0]['value'] = $form_state['input']['field_exchange_rate_to_usd_und_0_value'];
			$node = node_submit($node);
			try {
				node_save($node);
				$success = TRUE;
				drupal_set_message(t('Project <b>'.$node->title.'</b> updated.'));
			} 
			catch (Exception $e) {
				// Do your error handling here.
				$success = FALSE;
				drupal_set_message(t($e->getMessage().'<br/>Project not updated.'),'error');
			}
		}

		if ($success){
			$form_state['redirect'] = 'dashboard';
			$commands[] = ctools_ajax_command_reload();
			return array('#type' => 'ajax', '#commands' => $commands);
		} 
	}
	//return;
}

function wamex_project_delete_confirm($form, $form_state, $nid){
	$node = node_load($nid);
	$project_name = $node->title;
  if (user_access('Delete own content')) {
		$form['nid'] = array('#type' => 'hidden', '#value' => $nid);
    $output = confirm_form($form,
      t('Are you sure you want to delete %title?', array('%title' => $project_name)),
      isset($_GET['destination']) ? $_GET['destination'] : 'dashboard',
			t('Are you sure you want to delete %title? This action cannot be undone.', array('%title' => $project_name)),
			t('Yes'),
			t('No'));
  }
  return $output;
}

function wamex_project_delete_confirm_submit($form, &$form_state){
  if ($form_state['values']['confirm']) {
		try{
			node_delete($form_state['values']['nid']);
			$success = TRUE;
			drupal_set_message(t('The project has been deleted.'),'status');
		}
		catch (Exception $e){
			$success = FALSE;
			drupal_set_message(t('Could not delete the project.'),'error');
		}
	
    $form_state['redirect'] = 'dashboard';
    return;
  }
}

function wamex_ajax_get_ajax() {
	// The function will receive the array of arguments after the "get/ajax" prefix
  $path = implode('/', func_get_args());
  $render_string = menu_execute_active_handler($path, FALSE);
  return $render_string;
}

function wamex_ajax_callback($page_callback_result) {
	// Only render content and validates return
  $content = is_string($page_callback_result) ? $page_callback_result : drupal_render($page_callback_result);
  print $content;
}

function wamex_user_login(&$edit, $account)
{
  // set $redirection to the desired location
  $redirection = 'dashboard';
  
	// Unless there is already a redirection going, or the user is trying to reset his password, we redirect to $redirection.
  if (empty($_GET['destination'])
    && !is_null($redirection)
    && (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset'))
  {
    $_GET['destination'] = $redirection; // Should we use $edit['redirect'] instead..?
  }
}